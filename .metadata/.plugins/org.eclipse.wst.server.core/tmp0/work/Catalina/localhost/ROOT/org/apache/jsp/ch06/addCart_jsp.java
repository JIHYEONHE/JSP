/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.37
 * Generated at: 2022-10-18 06:16:52 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.ch06;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.ArrayList;
import ch04.vo.ProductVO;
import ch04.dao.ProductRepository;

public final class addCart_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1664261832316L));
    _jspx_dependants.put("jar:file:/E:/A_TeachingMaterial/4.MiddleProject/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/JSPBook/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("ch04.vo.ProductVO");
    _jspx_imports_classes.add("java.util.ArrayList");
    _jspx_imports_classes.add("ch04.dao.ProductRepository");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	//addCart.jsp?id=P1235
	String id = request.getParameter("id"); //P1235

	//id에 값이 없다면.. => 장바구니에 담을 상품이 없다면...
	if(id==null || id.trim().equals("")){
		//상품 목록으로 이동
		response.sendRedirect("products.jsp");
		//현재 jsp를 더이상 실행 안함
		return;
	}
	
	//상품 저장소 객체
	ProductRepository dao = ProductRepository.getInstance();
	
	//1) P1235에 해당되는 productVO를 가져옴
	//select * from product where product_id = 'P1235'
	//id : P1235
	ProductVO product = dao.getProductById(id);
	if(product == null){	//해당 상품이 없으면 예외 처리 페이지로 이동
		response.sendRedirect("exceptionNoProductId.jsp");
	}
	
	//2) cartlist라는 속성이 있는지 체킹 => 장바구니
	// session.getAttribute("cartlist");
	// 장바구니 안에는 상품들(List<ProductVO>)이 있다
	ArrayList<ProductVO> list 
		= (ArrayList<ProductVO>)session.getAttribute("cartlist");
	
	//2-2) cartlist라는 장바구니가 없으면 장바구니를 생성
	// 	   session.setAttribute("cartlist")
	if(list == null){
		//list는 null이므로 여기서 리스트를 생성해주자
		list = new ArrayList<ProductVO>();
		//cartlist라는 세션 속성 명으로 세션 생성
		session.setAttribute("cartlist", list);
	}
	//장바구니에 있는 상품이 파라미터로 넘어온 상품코드(id)와 같으면 1증가
	int cnt = 0;
	//3-1) cartlist라는 장바구니에 P1235라는 상품이 이미 있는 경우
	//	   P1235라는 상품 객체(productVO)의 quantitiy 멤버변수의 값을 1 증가
	for(int i=0;i<list.size();i++){
		//list는 장바구니 안의 상품목록(P1234,P1235,P1236)
		//list => List<ProductVO>
		//list.get(0) => ProductVO
		//list.get(0).getProductId() => P1234
		if(list.get(i).getProductId().equals(id)){
			cnt++;
			//장바구니에 상품이 이미 들어있으므로 장바구니에 담은 개수에 1 증가
			//list.get(i) => productVO(상품)
			//list.get(i).setQuantitiy() => 상품의 수량을 세팅
			list.get(i).setQuantity(list.get(i).getQuantity()+1);
		}
	}
	//3-2) cartlist라는 장바구니에 P1235라는 상품이 없는 경우
	//	   cartlist라는 장바구니에 P1235라는 상품을 넣어준다. quantitiy 값을 1으로 처리
	if(cnt==0){
		product.setQuantity(1);
		list.add(product);
	}
	
	//장바구니 확인
	//list : List<ProductVO>
// 	for(ProductVO vo : list){
// 		out.println("vo : "+ vo.toString() + "<br /><hr />");
// 	}
		
	//4) product.jsp?id=P1235 경로로 되돌아가자
	response.sendRedirect("product.jsp?id="+id);

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
